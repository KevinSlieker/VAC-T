<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
@*<script src="https://code.highcharts.com/stock/highstock.src.js"></script>*@

@model CompanyDashBoardViewModel;
@using Highsoft.Web.Mvc.Charts;
@using Highsoft.Web.Mvc.Charts.Rendering;
@using VAC_T.Services;
@{
    ViewData["Title"] = "DashBoardCompany";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var jobOffers = Model.Company.JobOffers != null ? Model.Company.JobOffers.Count() : 0;
    var solicitations = Model.Solicitations != null ? Model.Solicitations.Count() : 0;
    var averageSolicitationsPerJobOffer = Model.Solicitations != null ? Math.Round((double)solicitations / jobOffers, 1) : 0;
    var invited = Model.Solicitations != null ? Model.Solicitations.Where(s => s.Selected == true).Count() : 0;
    var percentageInvited = solicitations != 0 ? Math.Round((double)(100 * invited) / solicitations, 1) : 100;
    var solicitationsWAppointment = Model.Solicitations != null ? Model.Solicitations.Where(s => s.DateAppointmentSelected != null).Count() : 0 ;
    var percentageSolicitationsWappointment = solicitations != 0 ? Math.Round((double)(100 * solicitationsWAppointment) / invited, 1) : 100;

    var averageJobOfferLifeSpan = Model.Company.JobOffers != null ? Math.Round((double)Model.Company.JobOffers.Where(j => j.Closed != null).Select(j => ((j.Closed!.Value - j.Created).TotalDays)).Average(), 1) : 0;



    var chartOptions = new Highcharts
            {
                Title = new Title
                {
                    Text = "Bedrijf Informatie"
                },
                Subtitle = new Subtitle
                {
                    Text = "Source: DataBase"
                },
                //XAxis = new List<XAxis> {
                //  new XAxis {
                //    Categories = new List <string> {"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"}
                //  }
                //},
                XAxis = new List<XAxis>
                {
                    new XAxis
                    {
                        Type = "category"
                    }
                },

                YAxis = new List<YAxis> {
                    new YAxis {
                        Min = 0,
                        Title = new YAxisTitle {
                            Text = "Hoeveelheid"
                        }
                    }
                },
                Tooltip = new Tooltip
                {
                    HeaderFormat = "<span style='font-size:10px'>{point.key}</span><table style='font-size:12px'>",
                    PointFormat = "<tr><td style='color:{series.color};padding:0'></td><td style='padding:0'><b>{point.y:.1f}{point.description}</b></td></tr>",
                    //PointFormat = "<tr><td style='color:{series.color};padding:0'>{series.name}: </td><td style='padding:0'><b>{point.y:.1f}{point.description}</b></td></tr>",
                    FooterFormat = "</table>",
                    Shared = true,
                    UseHTML = true
                },
                PlotOptions = new PlotOptions
                {
                    Column = new PlotOptionsColumn
                    {
                        PointPadding = 0.2,
                        BorderWidth = 0
                    },
                    Series = new PlotOptionsSeries
                    {
                        DataLabels = new PlotOptionsSeriesDataLabels
                        {
                            Enabled = true,
                            VerticalAlign = PlotOptionsSeriesDataLabelsVerticalAlign.Bottom,
                            Inside = false,
                            Format = "{point.y}{point.description}"

                        }
                    }
                },

                //Series = new List<Series> {
                //  new ColumnSeries {
                //    Name = "Tokyo",
                //      Data = (List<ColumnSeriesData>)ViewData["tokyoData"]
                //  },
                //  new ColumnSeries {
                //    Name = "New York",
                //      Data = (List<ColumnSeriesData>)ViewData["nyData"]
                //  },
                //  new ColumnSeries {
                //    Name = "Berlin",
                //      Data = (List<ColumnSeriesData>)@ViewData["berlinData"]
                //  },
                //  new ColumnSeries {
                //    Name = "London",
                //      Data = (List<ColumnSeriesData>)@ViewData["londonData"]
                //  }
                //}
                Legend = new Legend
                {
                    Enabled = false,
                },
                Chart = new Chart
                {
                    Width = "1000",
                    Height = 400,
                    //Type = ChartType.Column
                },
                Series = new List<Series>
                {
                    new ColumnSeries
                    {
                        //ShowInLegend = false,
                        Name = "Vacatures en Solicitaties",
                        //Selected = true,
                        ColorByPoint = true,
                        Data = new List<ColumnSeriesData>
                        {
                            new ColumnSeriesData { Name = "Vacatures", Y = jobOffers},
                            new ColumnSeriesData { Name = "Gemiddelde Vacature duur", Y = averageJobOfferLifeSpan, Description = " dagen"},
                            new ColumnSeriesData { Name = "Gemiddelde Sollicitaties per vacature", Y = averageSolicitationsPerJobOffer},
                            new ColumnSeriesData { Name = "Percentage solicitatiegesprek uitnodigingen", Y = percentageInvited, Description = "%" },
                            new ColumnSeriesData { Name = "Percentage solicitatiegesprek plannen", Y = percentageSolicitationsWappointment, Description = "%"},
                        }
                    }
                }
            };

    chartOptions.ID = "chart";
    var renderer = new HighchartsRenderer(chartOptions);

    var enums = Enum.GetValues(typeof(RepeatAppointment.RepeatsType));
    List<string> list = new List<string>();
    foreach (RepeatAppointment.RepeatsType name in enums)
    {
        list.Add(name.GetSingleDisplayName());
    }
    List<ColumnSeriesData> selectedRepeatAppointments = new List<ColumnSeriesData>();
    foreach (KeyValuePair<RepeatAppointment.RepeatsType,int> s in Model.repeatAppointmentsAmount)
    {
        if (Model.Company.Appointments != null)
        {
            var repeatsId = Model.Company.RepeatAppointments.Where(a => a.Repeats == s.Key).Select(ra => ra.Id).ToList();
            var selected = Model.Company.Appointments.Where(a => a.RepeatAppointment.Repeats == s.Key).ToList();
            var valueSelected = selected != null ? selected.Count() : 0;
            selectedRepeatAppointments.Add(new ColumnSeriesData { Y = valueSelected });

        } else
        {
            selectedRepeatAppointments.Add(new ColumnSeriesData { Y = 0 });
        }
    };
    List<ColumnSeriesData> notSelectedRepeatAppointments = new List<ColumnSeriesData>();
    foreach (KeyValuePair<RepeatAppointment.RepeatsType, int> s in Model.repeatAppointmentsAmount)
    {
        var valueSelected = 0;
        if (Model.Company.Appointments != null)
        {
            var selected = Model.Company.Appointments.Where(a => a.RepeatAppointment.Repeats == s.Key).ToList();
            valueSelected = selected != null ? selected.Count() : 0;
        }
        notSelectedRepeatAppointments.Add(new ColumnSeriesData { Y = (s.Value - valueSelected) });
    };

    var chartOptions2 = new Highcharts
            {
                Title = new Title
                {
                    Text = "Bedrijf Informatie2"
                },
                Subtitle = new Subtitle
                {
                    Text = "Source: DataBase"
                },
                XAxis = new List<XAxis> {
                  new XAxis {
                    Categories = list
                  }
                },
                YAxis = new List<YAxis> {
                    new YAxis {
                        Min = 0,
                        Title = new YAxisTitle {
                            Text = "Percentage (%)"
                        }
                    }
                },
                Tooltip = new Tooltip
                {
                    //HeaderFormat = "<span style='font-size:10px'>{point.key}</span><table style='font-size:12px'>",
                    PointFormat = "<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>",
                    //PointFormat = "<tr><td style='color:{series.color};padding:0'>{series.name}: </td><td style='padding:0'><b>{point.y:.1f}{point.description}</b></td></tr>",
                    FooterFormat = "</table>",
                    Shared = true,
                    UseHTML = true
                },
                PlotOptions = new PlotOptions
                {
                    Column = new PlotOptionsColumn
                    {
                        PointPadding = 0.2,
                        BorderWidth = 0,
                        Stacking = PlotOptionsColumnStacking.Percent,
                    },
                    Series = new PlotOptionsSeries
                    {
                        DataLabels = new PlotOptionsSeriesDataLabels
                        {
                            Enabled = true,
                            VerticalAlign = PlotOptionsSeriesDataLabelsVerticalAlign.Bottom,
                            Inside = false,
                            Format = "{point.y}{point.description}"

                        }
                    }
                },
                Legend = new Legend
                {
                    Enabled = true,
                },
                Chart = new Chart
                {
                    Width = "1000",
                    Height = 400,
                    //Type = ChartType.Column
                },
                Series = new List<Series>
                {
                    new ColumnSeries
                    {
                        Name = "Niet geselecteerde herhaalafspraken",
                        Data = notSelectedRepeatAppointments,
                    },
                    new ColumnSeries
                    {
                        Name = "Geselecteerde herhaalafspraken",
                        Data = selectedRepeatAppointments,
                    },
                    
                }
            };

    chartOptions2.ID = "chart2";
    var renderer2 = new HighchartsRenderer(chartOptions2);

}

<h1>DashBoard @Model.Company.Name</h1>

<p>@Html.Raw(renderer.RenderHtml())</p>
<p>@Html.Raw(renderer2.RenderHtml())</p>